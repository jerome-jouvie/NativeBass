/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1new(JNIEnv *java_env, jclass jcls) {
	TAG_CART *result_ = new TAG_CART();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, TAG_CART *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	delete pointer;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Version_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->Version[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Version(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->Version;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 4);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1Version(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jVersion) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char Version = (char)jVersion;
	pointer->Version[elementIndex] = Version;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Title_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->Title[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Title(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->Title;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1Title(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jTitle) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char Title = (char)jTitle;
	pointer->Title[elementIndex] = Title;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Artist_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->Artist[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Artist(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->Artist;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1Artist(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jArtist) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char Artist = (char)jArtist;
	pointer->Artist[elementIndex] = Artist;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1CutID_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->CutID[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1CutID(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->CutID;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1CutID(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jCutID) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char CutID = (char)jCutID;
	pointer->CutID[elementIndex] = CutID;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ClientID_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->ClientID[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ClientID(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->ClientID;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1ClientID(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jClientID) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char ClientID = (char)jClientID;
	pointer->ClientID[elementIndex] = ClientID;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Category_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->Category[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Category(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->Category;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1Category(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jCategory) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char Category = (char)jCategory;
	pointer->Category[elementIndex] = Category;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Classification_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->Classification[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1Classification(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->Classification;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1Classification(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jClassification) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char Classification = (char)jClassification;
	pointer->Classification[elementIndex] = Classification;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1OutCue_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->OutCue[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1OutCue(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->OutCue;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1OutCue(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jOutCue) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char OutCue = (char)jOutCue;
	pointer->OutCue[elementIndex] = OutCue;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1StartDate_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->StartDate[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1StartDate(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->StartDate;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 10);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1StartDate(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jStartDate) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char StartDate = (char)jStartDate;
	pointer->StartDate[elementIndex] = StartDate;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1StartTime_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->StartTime[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1StartTime(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->StartTime;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 8);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1StartTime(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jStartTime) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char StartTime = (char)jStartTime;
	pointer->StartTime[elementIndex] = StartTime;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1EndDate_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->EndDate[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1EndDate(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->EndDate;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 10);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1EndDate(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jEndDate) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char EndDate = (char)jEndDate;
	pointer->EndDate[elementIndex] = EndDate;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1EndTime_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->EndTime[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1EndTime(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->EndTime;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 8);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1EndTime(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jEndTime) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char EndTime = (char)jEndTime;
	pointer->EndTime[elementIndex] = EndTime;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ProducerAppID_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->ProducerAppID[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ProducerAppID(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->ProducerAppID;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1ProducerAppID(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jProducerAppID) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char ProducerAppID = (char)jProducerAppID;
	pointer->ProducerAppID[elementIndex] = ProducerAppID;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ProducerAppVersion_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->ProducerAppVersion[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1ProducerAppVersion(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->ProducerAppVersion;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1ProducerAppVersion(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jProducerAppVersion) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char ProducerAppVersion = (char)jProducerAppVersion;
	pointer->ProducerAppVersion[elementIndex] = ProducerAppVersion;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1UserDef_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->UserDef[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1UserDef(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->UserDef;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1UserDef(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jUserDef) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char UserDef = (char)jUserDef;
	pointer->UserDef[elementIndex] = UserDef;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1dwLevelReference(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	DWORD result_ = pointer->dwLevelReference;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1dwLevelReference(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jdwLevelReference) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	DWORD dwLevelReference = (DWORD)jdwLevelReference;
	pointer->dwLevelReference = dwLevelReference;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1PostTimer_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	N2J_PTR2ADR(jresult, &(pointer->PostTimer[elementIndex]), TAG_CART_TIMER *);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1PostTimer(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	N2J_PTR2ADR(jresult, pointer->PostTimer, TAG_CART_TIMER *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1PostTimer(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jlong jPostTimer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	TAG_CART_TIMER *cresult = N2J_ADR2PTR(jPostTimer, TAG_CART_TIMER *);
	pointer->PostTimer[elementIndex] = *cresult;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1URL_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char result_ = pointer->URL[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1get_1URL(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char *result_ = (char *)pointer->URL;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((char *)result_, 1024);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CART_1set_1URL(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jURL) {
	TAG_CART *pointer = N2J_CAST(jpointer, TAG_CART *);
	char URL = (char)jURL;
	pointer->URL[elementIndex] = URL;
}



