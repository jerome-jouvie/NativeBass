/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1new(JNIEnv *java_env, jclass jcls) {
	TAG_CA_CODEC *result_ = new TAG_CA_CODEC();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, TAG_CA_CODEC *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	delete pointer;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1get_1ftype(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	DWORD result_ = pointer->ftype;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1set_1ftype(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jftype) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	DWORD ftype = (DWORD)jftype;
	pointer->ftype = ftype;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1get_1atype(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	DWORD result_ = pointer->atype;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1set_1atype(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jatype) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	DWORD atype = (DWORD)jatype;
	pointer->atype = atype;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1get_1name(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	const char *result_ = N2J_CAST(pointer->name, const char *);
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1CA_1CODEC_1set_1name(JNIEnv *java_env, jclass jcls, jlong jpointer, jbyteArray jname) {
	TAG_CA_CODEC *pointer = N2J_CAST(jpointer, TAG_CA_CODEC *);
	const char *name = 0;
	if(jname) {
		name = (const char *)getByteArrayElements(java_env, jname);
		pointer->name = name;
	}
	else {
		pointer->name = (const char *)0;
	}
}



