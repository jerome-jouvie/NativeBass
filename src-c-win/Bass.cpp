/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_BassJNI.h"
#include "CallbackManager.h"

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SetConfig(JNIEnv *java_env, jclass jcls, jint joption, jint jvalue) {
	DWORD option = (DWORD)joption;
	DWORD value = (DWORD)jvalue;

	BOOL result_ = BASS_SetConfig(option, value);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetConfig(JNIEnv *java_env, jclass jcls, jint joption) {
	DWORD option = (DWORD)joption;

	DWORD result_ = BASS_GetConfig(option);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SetConfigPtr(JNIEnv *java_env, jclass jcls, jint joption, jlong jvalue) {
	DWORD option = (DWORD)joption;
	void *value = N2J_ADR2PTR(jvalue, void *);

	BOOL result_ = BASS_SetConfigPtr(option, value);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetConfigPtr(JNIEnv *java_env, jclass jcls, jint joption) {
	DWORD option = (DWORD)joption;

	void *result_ = BASS_GetConfigPtr(option);

	N2J_PTR2ADR(jresult, result_, void *);

	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetVersion(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_GetVersion();

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ErrorGetCode(JNIEnv *java_env, jclass jcls) {

	int result_ = BASS_ErrorGetCode();

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetDeviceInfo(JNIEnv *java_env, jclass jcls, jint jdevice, jlong jinfo) {
	DWORD device = (DWORD)jdevice;
	BASS_DEVICEINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_DEVICEINFO *);
	}

	BOOL result_ = BASS_GetDeviceInfo(device, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Init(JNIEnv *java_env, jclass jcls, jint jdevice, jint jfreq, jint jflags, jlong jwin, jlong jdsguid) {
	int device = (int)jdevice;
	DWORD freq = (DWORD)jfreq;
	DWORD flags = (DWORD)jflags;
	void *win = N2J_ADR2PTR(jwin, void *);
	void *dsguid = N2J_ADR2PTR(jdsguid, void *);

	BOOL result_ = BASS_Init(device, freq, flags, (HWND)win, (GUID *)dsguid);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SetDevice(JNIEnv *java_env, jclass jcls, jint jdevice) {
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_SetDevice(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetDevice(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_GetDevice();

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Free(JNIEnv *java_env, jclass jcls) {

	BOOL result_ = BASS_Free();

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetInfo(JNIEnv *java_env, jclass jcls, jlong jinfo) {
	BASS_INFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_INFO *);
	}

	BOOL result_ = BASS_GetInfo(info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Update(JNIEnv *java_env, jclass jcls, jint jlength) {
	DWORD length = (DWORD)jlength;

	BOOL result_ = BASS_Update(length);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetCPU(JNIEnv *java_env, jclass jcls) {

	float result_ = BASS_GetCPU();

	return (jfloat)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Start(JNIEnv *java_env, jclass jcls) {

	BOOL result_ = BASS_Start();

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Stop(JNIEnv *java_env, jclass jcls) {

	BOOL result_ = BASS_Stop();

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Pause(JNIEnv *java_env, jclass jcls) {

	BOOL result_ = BASS_Pause();

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SetVolume(JNIEnv *java_env, jclass jcls, jfloat jvolume) {
	float volume = (float)jvolume;

	BOOL result_ = BASS_SetVolume(volume);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1GetVolume(JNIEnv *java_env, jclass jcls) {

	float result_ = BASS_GetVolume();

	return (jfloat)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1PluginLoad(JNIEnv *java_env, jclass jcls, jbyteArray jfile, jint jflags) {
	const char *file = (const char *)getByteArrayElements(java_env, jfile);
	DWORD flags = (DWORD)jflags;

	HPLUGIN cresult = BASS_PluginLoad(file, flags);

	releaseByteArrayElements(java_env, jfile, (const char *)file);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1PluginFree(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HPLUGIN handle = N2J_ADR2PTR(jhandle, HPLUGIN);

	BOOL result_ = BASS_PluginFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1PluginGetInfo(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HPLUGIN handle = N2J_ADR2PTR(jhandle, HPLUGIN);

	const BASS_PLUGININFO * result_ = BASS_PluginGetInfo(handle);

	N2J_PTR2ADR(jresult, result_, const BASS_PLUGININFO *);

	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Set3DFactors(JNIEnv *java_env, jclass jcls, jfloat jdistf, jfloat jrollf, jfloat jdoppf) {
	float distf = (float)jdistf;
	float rollf = (float)jrollf;
	float doppf = (float)jdoppf;

	BOOL result_ = BASS_Set3DFactors(distf, rollf, doppf);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Get3DFactors(JNIEnv *java_env, jclass jcls, jobject jdistf, jlong jdistf_, jobject jrollf, jlong jrollf_, jobject jdoppf, jlong jdoppf_) {
	float *distf = 0;
	if(jdistf) {
		distf = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jdistf), char *)+jdistf_, float *);
	}
	float *rollf = 0;
	if(jrollf) {
		rollf = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jrollf), char *)+jrollf_, float *);
	}
	float *doppf = 0;
	if(jdoppf) {
		doppf = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jdoppf), char *)+jdoppf_, float *);
	}

	BOOL result_ = BASS_Get3DFactors(distf, rollf, doppf);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Set3DPosition(JNIEnv *java_env, jclass jcls, jlong jpos, jlong jvel, jlong jfront, jlong jtop) {
	BASS_3DVECTOR *pos = 0;
	if(jpos) {
		pos = N2J_ADR2PTR(jpos, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *vel = 0;
	if(jvel) {
		vel = N2J_ADR2PTR(jvel, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *front = 0;
	if(jfront) {
		front = N2J_ADR2PTR(jfront, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *top = 0;
	if(jtop) {
		top = N2J_ADR2PTR(jtop, BASS_3DVECTOR *);
	}

	BOOL result_ = BASS_Set3DPosition(pos, vel, front, top);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Get3DPosition(JNIEnv *java_env, jclass jcls, jlong jpos, jlong jvel, jlong jfront, jlong jtop) {
	BASS_3DVECTOR *pos = 0;
	if(jpos) {
		pos = N2J_ADR2PTR(jpos, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *vel = 0;
	if(jvel) {
		vel = N2J_ADR2PTR(jvel, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *front = 0;
	if(jfront) {
		front = N2J_ADR2PTR(jfront, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *top = 0;
	if(jtop) {
		top = N2J_ADR2PTR(jtop, BASS_3DVECTOR *);
	}

	BOOL result_ = BASS_Get3DPosition(pos, vel, front, top);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT void JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Apply3D(JNIEnv *java_env, jclass jcls) {

	 BASS_Apply3D();

}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MusicLoad__ZJJIII(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jint jlength, jint jflags, jint jfreq) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	DWORD length = (DWORD)jlength;
	DWORD flags = (DWORD)jflags;
	DWORD freq = (DWORD)jfreq;

	HMUSIC cresult = BASS_MusicLoad(mem, file, offset, length, flags, freq);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MusicLoad__Z_3BJIII(JNIEnv *java_env, jclass jcls, jboolean jmem, jbyteArray jfile, jlong joffset, jint jlength, jint jflags, jint jfreq) {
	bool mem = N2J_CAST(jmem != 0, bool);
	char *file = getByteArrayElements(java_env, jfile);
	QWORD offset = (QWORD)joffset;
	DWORD length = (DWORD)jlength;
	DWORD flags = (DWORD)jflags;
	DWORD freq = (DWORD)jfreq;

	HMUSIC cresult = BASS_MusicLoad(mem, file, offset, length, flags, freq);

	releaseByteArrayElements(java_env, jfile, (const char *)file);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MusicFree(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HMUSIC handle = N2J_ADR2PTR(jhandle, HMUSIC);

	BOOL result_ = BASS_MusicFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleLoad__ZJJIII(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jint jlength, jint jmax, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	DWORD length = (DWORD)jlength;
	DWORD max = (DWORD)jmax;
	DWORD flags = (DWORD)jflags;

	HSAMPLE cresult = BASS_SampleLoad(mem, file, offset, length, max, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleLoad__Z_3BJIII(JNIEnv *java_env, jclass jcls, jboolean jmem, jbyteArray jfile, jlong joffset, jint jlength, jint jmax, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	char *file = getByteArrayElements(java_env, jfile);
	QWORD offset = (QWORD)joffset;
	DWORD length = (DWORD)jlength;
	DWORD max = (DWORD)jmax;
	DWORD flags = (DWORD)jflags;

	HSAMPLE cresult = BASS_SampleLoad(mem, file, offset, length, max, flags);

	releaseByteArrayElements(java_env, jfile, (const char *)file);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleCreate(JNIEnv *java_env, jclass jcls, jint jlength, jint jfreq, jint jchans, jint jmax, jint jflags) {
	DWORD length = (DWORD)jlength;
	DWORD freq = (DWORD)jfreq;
	DWORD chans = (DWORD)jchans;
	DWORD max = (DWORD)jmax;
	DWORD flags = (DWORD)jflags;

	HSAMPLE cresult = BASS_SampleCreate(length, freq, chans, max, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleFree(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);

	BOOL result_ = BASS_SampleFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleSetData(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jbuffer) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	void *buffer = N2J_ADR2PTR(jbuffer, void *);

	BOOL result_ = BASS_SampleSetData(handle, buffer);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleGetData(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jbuffer) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	void *buffer = N2J_ADR2PTR(jbuffer, void *);

	BOOL result_ = BASS_SampleGetData(handle, buffer);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleGetInfo(JNIEnv *java_env, jclass jcls, jlong jhandle, jobject jinfo, jlong jinfo_) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	BASS_SAMPLE *info = 0;
	if(jinfo) {
		info = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jinfo), char *)+jinfo_, BASS_SAMPLE *);
	}

	BOOL result_ = BASS_SampleGetInfo(handle, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleSetInfo(JNIEnv *java_env, jclass jcls, jlong jhandle, jobject jinfo, jlong jinfo_) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	BASS_SAMPLE *info = 0;
	if(jinfo) {
		info = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jinfo), char *)+jinfo_, BASS_SAMPLE *);
	}

	BOOL result_ = BASS_SampleSetInfo(handle, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleGetChannel(JNIEnv *java_env, jclass jcls, jlong jhandle, jboolean jonlynew) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	bool onlynew = N2J_CAST(jonlynew != 0, bool);

	HCHANNEL cresult = BASS_SampleGetChannel(handle, onlynew);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleGetChannels(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jchannels) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);
	HCHANNEL *channels = N2J_ADR2PTR(jchannels, HCHANNEL *);

	DWORD result_ = BASS_SampleGetChannels(handle, channels);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SampleStop(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSAMPLE handle = N2J_ADR2PTR(jhandle, HSAMPLE);

	BOOL result_ = BASS_SampleStop(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreate__IIIZJ(JNIEnv *java_env, jclass jcls, jint jfreq, jint jchans, jint jflags, jboolean jproc, jlong juser) {
	DWORD freq = (DWORD)jfreq;
	DWORD chans = (DWORD)jchans;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_StreamCreate(freq, chans, flags, jproc == 0 ? NULL : STREAMPROC_BRIDGE, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreate__IIIIJ(JNIEnv *java_env, jclass jcls, jint jfreq, jint jchans, jint jflags, jint jproc, jlong juser) {
	DWORD freq = (DWORD)jfreq;
	DWORD chans = (DWORD)jchans;
	DWORD flags = (DWORD)jflags;
	STREAMPROC * proc = (STREAMPROC *)jproc;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_StreamCreate(freq, chans, flags, proc, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreateFile__ZLjava_nio_ByteBuffer_2JJJI(JNIEnv *java_env, jclass jcls, jboolean jmem, jobject jfile, jlong jfile_, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = 0;
	if(jfile) {
		file = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jfile), char *)+jfile_, void *);
	}
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreateFile__Z_3BJJI(JNIEnv *java_env, jclass jcls, jboolean jmem, jbyteArray jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	char *file = getByteArrayElements(java_env, jfile);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_StreamCreateFile(mem, file, offset, length, flags);

	releaseByteArrayElements(java_env, jfile, (const char *)file);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jproc, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *proc = 0;
	if(jproc) {
		proc = N2J_ADR2PTR(jproc, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_StreamCreateFileUser(system, flags, proc, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamFree(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);

	BOOL result_ = BASS_StreamFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamGetFilePosition(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jmode) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD mode = (DWORD)jmode;

	QWORD result_ = BASS_StreamGetFilePosition(handle, mode);

	return (jlong)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamPutData(JNIEnv *java_env, jclass jcls, jlong jhandle, jobject jbuffer, jlong jbuffer_, jint jlength) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	void *buffer = 0;
	if(jbuffer) {
		buffer = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jbuffer), char *)+jbuffer_, void *);
	}
	DWORD length = (DWORD)jlength;

	DWORD result_ = BASS_StreamPutData(handle, buffer, length);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1StreamPutFileData(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jbuffer, jint jlength) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	void *buffer = N2J_ADR2PTR(jbuffer, void *);
	DWORD length = (DWORD)jlength;

	DWORD result_ = BASS_StreamPutFileData(handle, buffer, length);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordGetDeviceInfo(JNIEnv *java_env, jclass jcls, jint jdevice, jlong jinfo) {
	DWORD device = (DWORD)jdevice;
	BASS_DEVICEINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_DEVICEINFO *);
	}

	BOOL result_ = BASS_RecordGetDeviceInfo(device, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordInit(JNIEnv *java_env, jclass jcls, jint jdevice) {
	int device = (int)jdevice;

	BOOL result_ = BASS_RecordInit(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordSetDevice(JNIEnv *java_env, jclass jcls, jint jdevice) {
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_RecordSetDevice(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordGetDevice(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_RecordGetDevice();

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordFree(JNIEnv *java_env, jclass jcls) {

	BOOL result_ = BASS_RecordFree();

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordGetInfo(JNIEnv *java_env, jclass jcls, jlong jinfo) {
	BASS_RECORDINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_RECORDINFO *);
	}

	BOOL result_ = BASS_RecordGetInfo(info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordGetInputName(JNIEnv *java_env, jclass jcls, jint jinput) {
	int input = (int)jinput;

	const char * result_ = BASS_RecordGetInputName(input);

	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordSetInput(JNIEnv *java_env, jclass jcls, jint jinput, jint jflags, jfloat jvolume) {
	int input = (int)jinput;
	DWORD flags = (DWORD)jflags;
	float volume = (float)jvolume;

	BOOL result_ = BASS_RecordSetInput(input, flags, volume);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordGetInput(JNIEnv *java_env, jclass jcls, jint jinput, jobject jvolume, jlong jvolume_) {
	int input = (int)jinput;
	float *volume = 0;
	if(jvolume) {
		volume = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jvolume), char *)+jvolume_, float *);
	}

	DWORD result_ = BASS_RecordGetInput(input, volume);

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1RecordStart(JNIEnv *java_env, jclass jcls, jint jfreq, jint jchans, jint jflags, jboolean jproc, jlong juser) {
	DWORD freq = (DWORD)jfreq;
	DWORD chans = (DWORD)jchans;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HRECORD cresult = BASS_RecordStart(freq, chans, flags, jproc == 0 ? NULL : RECORDPROC_BRIDGE, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jdouble JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelBytes2Seconds(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jpos) {
	DWORD handle = (DWORD)jhandle;
	QWORD pos = (QWORD)jpos;

	double result_ = BASS_ChannelBytes2Seconds(handle, pos);

	return (jdouble)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSeconds2Bytes(JNIEnv *java_env, jclass jcls, jint jhandle, jdouble jpos) {
	DWORD handle = (DWORD)jhandle;
	double pos = (double)jpos;

	QWORD result_ = BASS_ChannelSeconds2Bytes(handle, pos);

	return (jlong)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetDevice(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_ChannelGetDevice(handle);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetDevice(JNIEnv *java_env, jclass jcls, jint jhandle, jint jdevice) {
	DWORD handle = (DWORD)jhandle;
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_ChannelSetDevice(handle, device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelIsActive(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_ChannelIsActive(handle);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetInfo(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jinfo) {
	DWORD handle = (DWORD)jhandle;
	BASS_CHANNELINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_CHANNELINFO *);
	}

	BOOL result_ = BASS_ChannelGetInfo(handle, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetTags(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtags) {
	DWORD handle = (DWORD)jhandle;
	DWORD tags = (DWORD)jtags;

	const char *result_ = BASS_ChannelGetTags(handle, tags);

N2J_PTR2ADR(jresult, result_, const char *);

	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelFlags(JNIEnv *java_env, jclass jcls, jint jhandle, jint jflags, jint jmask) {
	DWORD handle = (DWORD)jhandle;
	DWORD flags = (DWORD)jflags;
	DWORD mask = (DWORD)jmask;

	DWORD result_ = BASS_ChannelFlags(handle, flags, mask);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelUpdate(JNIEnv *java_env, jclass jcls, jint jhandle, jint jlength) {
	DWORD handle = (DWORD)jhandle;
	DWORD length = (DWORD)jlength;

	BOOL result_ = BASS_ChannelUpdate(handle, length);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelLock(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jlock) {
	DWORD handle = (DWORD)jhandle;
	bool lock = N2J_CAST(jlock != 0, bool);

	BOOL result_ = BASS_ChannelLock(handle, lock);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelPlay(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jrestart) {
	DWORD handle = (DWORD)jhandle;
	bool restart = N2J_CAST(jrestart != 0, bool);

	BOOL result_ = BASS_ChannelPlay(handle, restart);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelStop(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_ChannelStop(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelPause(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_ChannelPause(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetAttribute(JNIEnv *java_env, jclass jcls, jint jhandle, jint jattrib, jfloat jvalue) {
	DWORD handle = (DWORD)jhandle;
	DWORD attrib = (DWORD)jattrib;
	float value = (float)jvalue;

	BOOL result_ = BASS_ChannelSetAttribute(handle, attrib, value);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetAttribute(JNIEnv *java_env, jclass jcls, jint jhandle, jint jattrib, jobject jvalue, jlong jvalue_) {
	DWORD handle = (DWORD)jhandle;
	DWORD attrib = (DWORD)jattrib;
	float *value = 0;
	if(jvalue) {
		value = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jvalue), char *)+jvalue_, float *);
	}

	BOOL result_ = BASS_ChannelGetAttribute(handle, attrib, value);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSlideAttribute(JNIEnv *java_env, jclass jcls, jint jhandle, jint jattrib, jfloat jvalue, jint jtime) {
	DWORD handle = (DWORD)jhandle;
	DWORD attrib = (DWORD)jattrib;
	float value = (float)jvalue;
	DWORD time = (DWORD)jtime;

	BOOL result_ = BASS_ChannelSlideAttribute(handle, attrib, value, time);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelIsSliding(JNIEnv *java_env, jclass jcls, jint jhandle, jint jattrib) {
	DWORD handle = (DWORD)jhandle;
	DWORD attrib = (DWORD)jattrib;

	BOOL result_ = BASS_ChannelIsSliding(handle, attrib);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSet3DAttributes(JNIEnv *java_env, jclass jcls, jint jhandle, jint jmode, jfloat jmin, jfloat jmax, jint jiangle, jint joangle, jfloat joutvol) {
	DWORD handle = (DWORD)jhandle;
	int mode = (int)jmode;
	float min = (float)jmin;
	float max = (float)jmax;
	int iangle = (int)jiangle;
	int oangle = (int)joangle;
	float outvol = (float)joutvol;

	BOOL result_ = BASS_ChannelSet3DAttributes(handle, mode, min, max, iangle, oangle, outvol);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGet3DAttributes(JNIEnv *java_env, jclass jcls, jint jhandle, jobject jmode, jlong jmode_, jobject jmin, jlong jmin_, jobject jmax, jlong jmax_, jobject jiangle, jlong jiangle_, jobject joangle, jlong joangle_, jobject joutvol, jlong joutvol_) {
	DWORD handle = (DWORD)jhandle;
	DWORD *mode = 0;
	if(jmode) {
		mode = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmode), char *)+jmode_, DWORD *);
	}
	float *min = 0;
	if(jmin) {
		min = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmin), char *)+jmin_, float *);
	}
	float *max = 0;
	if(jmax) {
		max = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmax), char *)+jmax_, float *);
	}
	DWORD *iangle = 0;
	if(jiangle) {
		iangle = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jiangle), char *)+jiangle_, DWORD *);
	}
	DWORD *oangle = 0;
	if(joangle) {
		oangle = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(joangle), char *)+joangle_, DWORD *);
	}
	float *outvol = 0;
	if(joutvol) {
		outvol = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(joutvol), char *)+joutvol_, float *);
	}

	BOOL result_ = BASS_ChannelGet3DAttributes(handle, mode, min, max, iangle, oangle, outvol);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSet3DPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jpos, jlong jorient, jlong jvel) {
	DWORD handle = (DWORD)jhandle;
	BASS_3DVECTOR *pos = 0;
	if(jpos) {
		pos = N2J_ADR2PTR(jpos, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *orient = 0;
	if(jorient) {
		orient = N2J_ADR2PTR(jorient, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *vel = 0;
	if(jvel) {
		vel = N2J_ADR2PTR(jvel, BASS_3DVECTOR *);
	}

	BOOL result_ = BASS_ChannelSet3DPosition(handle, pos, orient, vel);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGet3DPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jpos, jlong jorient, jlong jvel) {
	DWORD handle = (DWORD)jhandle;
	BASS_3DVECTOR *pos = 0;
	if(jpos) {
		pos = N2J_ADR2PTR(jpos, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *orient = 0;
	if(jorient) {
		orient = N2J_ADR2PTR(jorient, BASS_3DVECTOR *);
	}
	BASS_3DVECTOR *vel = 0;
	if(jvel) {
		vel = N2J_ADR2PTR(jvel, BASS_3DVECTOR *);
	}

	BOOL result_ = BASS_ChannelGet3DPosition(handle, pos, orient, vel);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetLength(JNIEnv *java_env, jclass jcls, jint jhandle, jint jmode) {
	DWORD handle = (DWORD)jhandle;
	DWORD mode = (DWORD)jmode;

	QWORD result_ = BASS_ChannelGetLength(handle, mode);

	return (jlong)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jpos, jint jmode) {
	DWORD handle = (DWORD)jhandle;
	QWORD pos = (QWORD)jpos;
	DWORD mode = (DWORD)jmode;

	BOOL result_ = BASS_ChannelSetPosition(handle, pos, mode);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jint jmode) {
	DWORD handle = (DWORD)jhandle;
	DWORD mode = (DWORD)jmode;

	QWORD result_ = BASS_ChannelGetPosition(handle, mode);

	return (jlong)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetLevel(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_ChannelGetLevel(handle);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelGetData(JNIEnv *java_env, jclass jcls, jint jhandle, jobject jbuffer, jlong jbuffer_, jint jlength) {
	DWORD handle = (DWORD)jhandle;
	void *buffer = 0;
	if(jbuffer) {
		buffer = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jbuffer), char *)+jbuffer_, void *);
	}
	DWORD length = (DWORD)jlength;

	DWORD result_ = BASS_ChannelGetData(handle, buffer, length);

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetSync(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jlong jparam, jboolean jproc, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	QWORD param = (QWORD)jparam;
	void *user = N2J_ADR2PTR(juser, void *);

	HSYNC cresult = BASS_ChannelSetSync(handle, type, param, jproc == 0 ? NULL : SYNCPROC_BRIDGE, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelRemoveSync(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jsync) {
	DWORD handle = (DWORD)jhandle;
	HSYNC sync = N2J_ADR2PTR(jsync, HSYNC);

	BOOL result_ = BASS_ChannelRemoveSync(handle, sync);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetDSP(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jproc, jlong juser, jint jpriority) {
	DWORD handle = (DWORD)jhandle;
	void *user = N2J_ADR2PTR(juser, void *);
	int priority = (int)jpriority;

	HDSP cresult = BASS_ChannelSetDSP(handle, jproc == 0 ? NULL : DSPPROC_BRIDGE, user, priority);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelRemoveDSP(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jdsp) {
	DWORD handle = (DWORD)jhandle;
	HDSP dsp = N2J_ADR2PTR(jdsp, HDSP);

	BOOL result_ = BASS_ChannelRemoveDSP(handle, dsp);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetLink(JNIEnv *java_env, jclass jcls, jint jhandle, jint jchan) {
	DWORD handle = (DWORD)jhandle;
	DWORD chan = (DWORD)jchan;

	BOOL result_ = BASS_ChannelSetLink(handle, chan);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelRemoveLink(JNIEnv *java_env, jclass jcls, jint jhandle, jint jchan) {
	DWORD handle = (DWORD)jhandle;
	DWORD chan = (DWORD)jchan;

	BOOL result_ = BASS_ChannelRemoveLink(handle, chan);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelSetFX(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jint jpriority) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	int priority = (int)jpriority;

	HFX cresult = BASS_ChannelSetFX(handle, type, priority);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ChannelRemoveFX(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jfx) {
	DWORD handle = (DWORD)jhandle;
	HFX fx = N2J_ADR2PTR(jfx, HFX);

	BOOL result_ = BASS_ChannelRemoveFX(handle, fx);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FXSetParameters(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jparams) {
	HFX handle = N2J_ADR2PTR(jhandle, HFX);
	void *params = N2J_ADR2PTR(jparams, void *);

	BOOL result_ = BASS_FXSetParameters(handle, params);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FXGetParameters(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jparams) {
	HFX handle = N2J_ADR2PTR(jhandle, HFX);
	void *params = N2J_ADR2PTR(jparams, void *);

	BOOL result_ = BASS_FXGetParameters(handle, params);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FXReset(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HFX handle = N2J_ADR2PTR(jhandle, HFX);

	BOOL result_ = BASS_FXReset(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1GetVersion(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_Encode_GetVersion();

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1Start(JNIEnv *java_env, jclass jcls, jint jhandle, jbyteArray jcmdline, jint jflags, jboolean jproc, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	const char *cmdline = (const char *)getByteArrayElements(java_env, jcmdline);
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HENCODE cresult = BASS_Encode_Start(handle, cmdline, flags, jproc == 0 ? NULL : ENCODEPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jcmdline, (const char *)cmdline);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1StartLimit(JNIEnv *java_env, jclass jcls, jint jhandle, jbyteArray jcmdline, jint jflags, jboolean jproc, jlong juser, jint jlimit) {
	DWORD handle = (DWORD)jhandle;
	const char *cmdline = (const char *)getByteArrayElements(java_env, jcmdline);
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);
	DWORD limit = (DWORD)jlimit;

	HENCODE cresult = BASS_Encode_StartLimit(handle, cmdline, flags, jproc == 0 ? NULL : ENCODEPROC_BRIDGE, user, limit);

	releaseByteArrayElements(java_env, jcmdline, (const char *)cmdline);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1AddChunk(JNIEnv *java_env, jclass jcls, jlong jhandle, jbyteArray jid, jlong jbuffer, jint jlength) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	const char *id = (const char *)getByteArrayElements(java_env, jid);
	void *buffer = N2J_ADR2PTR(jbuffer, void *);
	DWORD length = (DWORD)jlength;

	BOOL result_ = BASS_Encode_AddChunk(handle, id, buffer, length);

	releaseByteArrayElements(java_env, jid, (const char *)id);
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1IsActive(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_Encode_IsActive(handle);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1Stop(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_Encode_Stop(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1StopEx(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jqueue) {
	DWORD handle = (DWORD)jhandle;
	bool queue = N2J_CAST(jqueue != 0, bool);

	BOOL result_ = BASS_Encode_StopEx(handle, queue);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1SetPaused(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jpaused) {
	DWORD handle = (DWORD)jhandle;
	bool paused = N2J_CAST(jpaused != 0, bool);

	BOOL result_ = BASS_Encode_SetPaused(handle, paused);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1Write(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jbuffer, jint jlength) {
	DWORD handle = (DWORD)jhandle;
	void *buffer = N2J_ADR2PTR(jbuffer, void *);
	DWORD length = (DWORD)jlength;

	BOOL result_ = BASS_Encode_Write(handle, buffer, length);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1SetNotify(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jproc, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	void *user = N2J_ADR2PTR(juser, void *);

	BOOL result_ = BASS_Encode_SetNotify(handle, jproc == 0 ? NULL : ENCODENOTIFYPROC_BRIDGE, user);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1GetCount(JNIEnv *java_env, jclass jcls, jint jhandle, jint jcount) {
	DWORD handle = (DWORD)jhandle;
	DWORD count = (DWORD)jcount;

	QWORD result_ = BASS_Encode_GetCount(handle, count);

	return (jlong)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1SetChannel(JNIEnv *java_env, jclass jcls, jint jhandle, jint jchannel) {
	DWORD handle = (DWORD)jhandle;
	DWORD channel = (DWORD)jchannel;

	BOOL result_ = BASS_Encode_SetChannel(handle, channel);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1GetChannel(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);

	DWORD result_ = BASS_Encode_GetChannel(handle);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1CastInit(JNIEnv *java_env, jclass jcls, jlong jhandle, jbyteArray jserver, jbyteArray jpass, jbyteArray jcontent, jbyteArray jname, jbyteArray jurl, jbyteArray jgenre, jbyteArray jdesc, jbyteArray jheaders, jint jbitrate, jboolean jpub) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	const char *server = (const char *)getByteArrayElements(java_env, jserver);
	const char *pass = (const char *)getByteArrayElements(java_env, jpass);
	const char *content = (const char *)getByteArrayElements(java_env, jcontent);
	const char *name = (const char *)getByteArrayElements(java_env, jname);
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	const char *genre = (const char *)getByteArrayElements(java_env, jgenre);
	const char *desc = (const char *)getByteArrayElements(java_env, jdesc);
	const char *headers = (const char *)getByteArrayElements(java_env, jheaders);
	DWORD bitrate = (DWORD)jbitrate;
	bool pub = N2J_CAST(jpub != 0, bool);

	BOOL result_ = BASS_Encode_CastInit(handle, server, pass, content, name, url, genre, desc, headers, bitrate, pub);

	releaseByteArrayElements(java_env, jserver, (const char *)server);
	releaseByteArrayElements(java_env, jpass, (const char *)pass);
	releaseByteArrayElements(java_env, jcontent, (const char *)content);
	releaseByteArrayElements(java_env, jname, (const char *)name);
	releaseByteArrayElements(java_env, jurl, (const char *)url);
	releaseByteArrayElements(java_env, jgenre, (const char *)genre);
	releaseByteArrayElements(java_env, jdesc, (const char *)desc);
	releaseByteArrayElements(java_env, jheaders, (const char *)headers);
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1CastSetTitle(JNIEnv *java_env, jclass jcls, jlong jhandle, jbyteArray jtitle, jbyteArray jurl) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	const char *title = (const char *)getByteArrayElements(java_env, jtitle);
	const char *url = (const char *)getByteArrayElements(java_env, jurl);

	BOOL result_ = BASS_Encode_CastSetTitle(handle, title, url);

	releaseByteArrayElements(java_env, jtitle, (const char *)title);
	releaseByteArrayElements(java_env, jurl, (const char *)url);
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1CastGetStats(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jtype, jbyteArray jpass) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	DWORD type = (DWORD)jtype;
	const char *pass = (const char *)getByteArrayElements(java_env, jpass);

	const char * result_ = BASS_Encode_CastGetStats(handle, type, pass);

	releaseByteArrayElements(java_env, jpass, (const char *)pass);
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1ServerInit(JNIEnv *java_env, jclass jcls, jlong jhandle, jbyteArray jport, jint jbuffer, jint jburst, jint jflags, jboolean jproc, jlong juser) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	const char *port = (const char *)getByteArrayElements(java_env, jport);
	DWORD buffer = (DWORD)jbuffer;
	DWORD burst = (DWORD)jburst;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	DWORD result_ = BASS_Encode_ServerInit(handle, port, buffer, burst, flags, jproc == 0 ? NULL : ENCODECLIENTPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jport, (const char *)port);
	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Encode_1ServerKick(JNIEnv *java_env, jclass jcls, jlong jhandle, jbyteArray jclient) {
	HENCODE handle = N2J_ADR2PTR(jhandle, HENCODE);
	const char *client = (const char *)getByteArrayElements(java_env, jclient);

	BOOL result_ = BASS_Encode_ServerKick(handle, client);

	releaseByteArrayElements(java_env, jclient, (const char *)client);
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FLAC_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_FLAC_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FLAC_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_FLAC_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FLAC_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_FLAC_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamCreate(JNIEnv *java_env, jclass jcls, jint jchannels, jint jflags, jint jfreq) {
	DWORD channels = (DWORD)jchannels;
	DWORD flags = (DWORD)jflags;
	DWORD freq = (DWORD)jfreq;

	HSTREAM cresult = BASS_MIDI_StreamCreate(channels, flags, freq);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags, jint jfreq) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;
	DWORD freq = (DWORD)jfreq;

	HSTREAM cresult = BASS_MIDI_StreamCreateFile(mem, file, offset, length, flags, freq);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser, jint jfreq) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);
	DWORD freq = (DWORD)jfreq;

	HSTREAM cresult = BASS_MIDI_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user, freq);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser, jint jfreq) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);
	DWORD freq = (DWORD)jfreq;

	HSTREAM cresult = BASS_MIDI_StreamCreateFileUser(system, flags, procs, user, freq);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamGetMark(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jtype, jint jindex, jobject jmark, jlong jmark_) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD type = (DWORD)jtype;
	DWORD index = (DWORD)jindex;
	BASS_MIDI_MARK *mark = 0;
	if(jmark) {
		mark = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmark), char *)+jmark_, BASS_MIDI_MARK *);
	}

	BOOL result_ = BASS_MIDI_StreamGetMark(handle, type, index, mark);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamSetFonts(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jfonts, jint jcount) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	BASS_MIDI_FONT *fonts = 0;
	if(jfonts) {
		fonts = N2J_ADR2PTR(jfonts, BASS_MIDI_FONT *);
	}
	DWORD count = (DWORD)jcount;

	BOOL result_ = BASS_MIDI_StreamSetFonts(handle, fonts, count);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamGetFonts(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jfonts, jint jcount) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	BASS_MIDI_FONT *fonts = 0;
	if(jfonts) {
		fonts = N2J_ADR2PTR(jfonts, BASS_MIDI_FONT *);
	}
	DWORD count = (DWORD)jcount;

	DWORD result_ = BASS_MIDI_StreamGetFonts(handle, fonts, count);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamLoadSamples(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);

	BOOL result_ = BASS_MIDI_StreamLoadSamples(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamEvent(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jchan, jint jevent, jint jparam) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD chan = (DWORD)jchan;
	DWORD event = (DWORD)jevent;
	DWORD param = (DWORD)jparam;

	BOOL result_ = BASS_MIDI_StreamEvent(handle, chan, event, param);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamEvents(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jmode, jlong jevents, jint jlength) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD mode = (DWORD)jmode;
	void *events = N2J_ADR2PTR(jevents, void *);
	DWORD length = (DWORD)jlength;

	DWORD result_ = BASS_MIDI_StreamEvents(handle, mode, events, length);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamGetEvent(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jchan, jint jevent) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD chan = (DWORD)jchan;
	DWORD event = (DWORD)jevent;

	DWORD result_ = BASS_MIDI_StreamGetEvent(handle, chan, event);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamGetEvents(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jtrack, jint jfilter, jlong jevents) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD track = (DWORD)jtrack;
	DWORD filter = (DWORD)jfilter;
	BASS_MIDI_EVENT *events = 0;
	if(jevents) {
		events = N2J_ADR2PTR(jevents, BASS_MIDI_EVENT *);
	}

	DWORD result_ = BASS_MIDI_StreamGetEvents(handle, track, filter, events);

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1StreamGetChannel(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jchan) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD chan = (DWORD)jchan;

	HSTREAM cresult = BASS_MIDI_StreamGetChannel(handle, chan);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontInit(JNIEnv *java_env, jclass jcls, jlong jfile, jint jflags) {
	void *file = N2J_ADR2PTR(jfile, void *);
	DWORD flags = (DWORD)jflags;

	HSOUNDFONT cresult = BASS_MIDI_FontInit(file, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontFree(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);

	BOOL result_ = BASS_MIDI_FontFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontGetInfo(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong jinfo) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	BASS_MIDI_FONTINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_MIDI_FONTINFO *);
	}

	BOOL result_ = BASS_MIDI_FontGetInfo(handle, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontGetPreset(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jpreset, jint jbank) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	int preset = (int)jpreset;
	int bank = (int)jbank;

	const char * result_ = BASS_MIDI_FontGetPreset(handle, preset, bank);

	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontLoad(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jpreset, jint jbank) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	int preset = (int)jpreset;
	int bank = (int)jbank;

	BOOL result_ = BASS_MIDI_FontLoad(handle, preset, bank);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontCompact(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);

	BOOL result_ = BASS_MIDI_FontCompact(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontPack(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong joutfile, jlong jencoder, jint jflags) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	void *outfile = N2J_ADR2PTR(joutfile, void *);
	void *encoder = N2J_ADR2PTR(jencoder, void *);
	DWORD flags = (DWORD)jflags;

	BOOL result_ = BASS_MIDI_FontPack(handle, outfile, encoder, flags);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontUnpack(JNIEnv *java_env, jclass jcls, jlong jhandle, jlong joutfile, jint jflags) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	void *outfile = N2J_ADR2PTR(joutfile, void *);
	DWORD flags = (DWORD)jflags;

	BOOL result_ = BASS_MIDI_FontUnpack(handle, outfile, flags);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontSetVolume(JNIEnv *java_env, jclass jcls, jlong jhandle, jfloat jvolume) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);
	float volume = (float)jvolume;

	BOOL result_ = BASS_MIDI_FontSetVolume(handle, volume);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1FontGetVolume(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSOUNDFONT handle = N2J_ADR2PTR(jhandle, HSOUNDFONT);

	float result_ = BASS_MIDI_FontGetVolume(handle);

	return (jfloat)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1InGetDeviceInfo(JNIEnv *java_env, jclass jcls, jint jdevice, jlong jinfo) {
	DWORD device = (DWORD)jdevice;
	BASS_MIDI_DEVICEINFO *info = 0;
	if(jinfo) {
		info = N2J_ADR2PTR(jinfo, BASS_MIDI_DEVICEINFO *);
	}

	BOOL result_ = BASS_MIDI_InGetDeviceInfo(device, info);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1InInit(JNIEnv *java_env, jclass jcls, jint jdevice, jboolean jproc, jlong juser) {
	DWORD device = (DWORD)jdevice;
	void *user = N2J_ADR2PTR(juser, void *);

	BOOL result_ = BASS_MIDI_InInit(device, jproc == 0 ? NULL : MIDIINPROC_BRIDGE, user);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1InFree(JNIEnv *java_env, jclass jcls, jint jdevice) {
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_MIDI_InFree(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1InStart(JNIEnv *java_env, jclass jcls, jint jdevice) {
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_MIDI_InStart(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MIDI_1InStop(JNIEnv *java_env, jclass jcls, jint jdevice) {
	DWORD device = (DWORD)jdevice;

	BOOL result_ = BASS_MIDI_InStop(device);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1GetVersion(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_Mixer_GetVersion();

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1StreamCreate(JNIEnv *java_env, jclass jcls, jint jfreq, jint jchans, jint jflags) {
	DWORD freq = (DWORD)jfreq;
	DWORD chans = (DWORD)jchans;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_Mixer_StreamCreate(freq, chans, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1StreamAddChannel(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jchannel, jint jflags) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD channel = (DWORD)jchannel;
	DWORD flags = (DWORD)jflags;

	BOOL result_ = BASS_Mixer_StreamAddChannel(handle, channel, flags);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1StreamAddChannelEx(JNIEnv *java_env, jclass jcls, jlong jhandle, jint jchannel, jint jflags, jlong jstart, jlong jlength) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);
	DWORD channel = (DWORD)jchannel;
	DWORD flags = (DWORD)jflags;
	QWORD start = (QWORD)jstart;
	QWORD length = (QWORD)jlength;

	BOOL result_ = BASS_Mixer_StreamAddChannelEx(handle, channel, flags, start, length);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetMixer(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	HSTREAM cresult = BASS_Mixer_ChannelGetMixer(handle);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelFlags(JNIEnv *java_env, jclass jcls, jint jhandle, jint jflags, jint jmask) {
	DWORD handle = (DWORD)jhandle;
	DWORD flags = (DWORD)jflags;
	DWORD mask = (DWORD)jmask;

	DWORD result_ = BASS_Mixer_ChannelFlags(handle, flags, mask);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelRemove(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_Mixer_ChannelRemove(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelSetPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jpos, jint jmode) {
	DWORD handle = (DWORD)jhandle;
	QWORD pos = (QWORD)jpos;
	DWORD mode = (DWORD)jmode;

	BOOL result_ = BASS_Mixer_ChannelSetPosition(handle, pos, mode);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetPosition(JNIEnv *java_env, jclass jcls, jint jhandle, jint jmode) {
	DWORD handle = (DWORD)jhandle;
	DWORD mode = (DWORD)jmode;

	QWORD result_ = BASS_Mixer_ChannelGetPosition(handle, mode);

	return (jlong)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetPositionEx(JNIEnv *java_env, jclass jcls, jint jchannel, jint jmode, jint jdelay) {
	DWORD channel = (DWORD)jchannel;
	DWORD mode = (DWORD)jmode;
	DWORD delay = (DWORD)jdelay;

	QWORD result_ = BASS_Mixer_ChannelGetPositionEx(channel, mode, delay);

	return (jlong)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetLevel(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_Mixer_ChannelGetLevel(handle);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetData(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jbuffer, jint jlength) {
	DWORD handle = (DWORD)jhandle;
	void *buffer = N2J_ADR2PTR(jbuffer, void *);
	DWORD length = (DWORD)jlength;

	DWORD result_ = BASS_Mixer_ChannelGetData(handle, buffer, length);

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelSetSync(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jlong jparam, jboolean jproc, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	QWORD param = (QWORD)jparam;
	void *user = N2J_ADR2PTR(juser, void *);

	HSYNC cresult = BASS_Mixer_ChannelSetSync(handle, type, param, jproc == 0 ? NULL : SYNCPROC_BRIDGE, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelRemoveSync(JNIEnv *java_env, jclass jcls, jint jchannel, jlong jsync) {
	DWORD channel = (DWORD)jchannel;
	HSYNC sync = N2J_ADR2PTR(jsync, HSYNC);

	BOOL result_ = BASS_Mixer_ChannelRemoveSync(channel, sync);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelSetMatrix(JNIEnv *java_env, jclass jcls, jint jhandle, jobject jmatrix, jlong jmatrix_) {
	DWORD handle = (DWORD)jhandle;
	const float *matrix = 0;
	if(jmatrix) {
		matrix = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmatrix), char *)+jmatrix_, const float *);
	}

	BOOL result_ = BASS_Mixer_ChannelSetMatrix(handle, matrix);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetMatrix(JNIEnv *java_env, jclass jcls, jint jhandle, jobject jmatrix, jlong jmatrix_) {
	DWORD handle = (DWORD)jhandle;
	float *matrix = 0;
	if(jmatrix) {
		matrix = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jmatrix), char *)+jmatrix_, float *);
	}

	BOOL result_ = BASS_Mixer_ChannelGetMatrix(handle, matrix);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelSetEnvelope(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jlong jnodes, jint jcount) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	BASS_MIXER_NODE *nodes = 0;
	if(jnodes) {
		nodes = N2J_ADR2PTR(jnodes, BASS_MIXER_NODE *);
	}
	DWORD count = (DWORD)jcount;

	BOOL result_ = BASS_Mixer_ChannelSetEnvelope(handle, type, nodes, count);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelSetEnvelopePos(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jlong jpos) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	QWORD pos = (QWORD)jpos;

	BOOL result_ = BASS_Mixer_ChannelSetEnvelopePos(handle, type, pos);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Mixer_1ChannelGetEnvelopePos(JNIEnv *java_env, jclass jcls, jint jhandle, jint jtype, jobject jvalue, jlong jvalue_) {
	DWORD handle = (DWORD)jhandle;
	DWORD type = (DWORD)jtype;
	float *value = 0;
	if(jvalue) {
		value = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jvalue), char *)+jvalue_, float *);
	}

	QWORD result_ = BASS_Mixer_ChannelGetEnvelopePos(handle, type, value);

	return (jlong)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamCreate(JNIEnv *java_env, jclass jcls, jint jchannel, jint jflags, jobject jchanmap, jlong jchanmap_) {
	DWORD channel = (DWORD)jchannel;
	DWORD flags = (DWORD)jflags;
	int *chanmap = 0;
	if(jchanmap) {
		chanmap = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jchanmap), char *)+jchanmap_, int *);
	}

	HSTREAM cresult = BASS_Split_StreamCreate(channel, flags, chanmap);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamGetSource(JNIEnv *java_env, jclass jcls, jlong jhandle) {
	HSTREAM handle = N2J_ADR2PTR(jhandle, HSTREAM);

	DWORD result_ = BASS_Split_StreamGetSource(handle);

	return (jint)result_;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamGetSplits(JNIEnv *java_env, jclass jcls, jint jhandle, jlong jsplits, jint jcount) {
	DWORD handle = (DWORD)jhandle;
	HSTREAM *splits = N2J_ADR2PTR(jsplits, HSTREAM *);
	DWORD count = (DWORD)jcount;

	DWORD result_ = BASS_Split_StreamGetSplits(handle, splits, count);

	return (jint)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamReset(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_Split_StreamReset(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamResetEx(JNIEnv *java_env, jclass jcls, jint jhandle, jint joffset) {
	DWORD handle = (DWORD)jhandle;
	DWORD offset = (DWORD)joffset;

	BOOL result_ = BASS_Split_StreamResetEx(handle, offset);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1Split_1StreamGetAvailable(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	DWORD result_ = BASS_Split_StreamGetAvailable(handle);

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1WV_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_WV_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1WV_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_WV_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AAC_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_AAC_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AAC_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_AAC_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AAC_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_AAC_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MP4_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_MP4_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MP4_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_MP4_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AC3_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_AC3_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AC3_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_AC3_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1AC3_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_AC3_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ALAC_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_ALAC_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1ALAC_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jprocs, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *procs = 0;
	if(jprocs) {
		procs = N2J_ADR2PTR(jprocs, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_ALAC_StreamCreateFileUser(system, flags, procs, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1GetVersion(JNIEnv *java_env, jclass jcls) {

	DWORD result_ = BASS_FX_GetVersion();

	return (jint)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1TempoCreate(JNIEnv *java_env, jclass jcls, jint jchan, jint jflags) {
	DWORD chan = (DWORD)jchan;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_FX_TempoCreate(chan, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1TempoGetSource(JNIEnv *java_env, jclass jcls, jlong jchan) {
	HSTREAM chan = N2J_ADR2PTR(jchan, HSTREAM);

	DWORD result_ = BASS_FX_TempoGetSource(chan);

	return (jint)result_;
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1TempoGetRateRatio(JNIEnv *java_env, jclass jcls, jlong jchan) {
	HSTREAM chan = N2J_ADR2PTR(jchan, HSTREAM);

	float result_ = BASS_FX_TempoGetRateRatio(chan);

	return (jfloat)result_;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1ReverseCreate(JNIEnv *java_env, jclass jcls, jint jchan, jfloat jdec_block, jint jflags) {
	DWORD chan = (DWORD)jchan;
	float dec_block = (float)jdec_block;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_FX_ReverseCreate(chan, dec_block, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1ReverseGetSource(JNIEnv *java_env, jclass jcls, jlong jchan) {
	HSTREAM chan = N2J_ADR2PTR(jchan, HSTREAM);

	DWORD result_ = BASS_FX_ReverseGetSource(chan);

	return (jint)result_;
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1DecodeGet(JNIEnv *java_env, jclass jcls, jint jchan, jdouble jstartSec, jdouble jendSec, jint jminMaxBPM, jint jflags, jboolean jproc) {
	DWORD chan = (DWORD)jchan;
	double startSec = (double)jstartSec;
	double endSec = (double)jendSec;
	DWORD minMaxBPM = (DWORD)jminMaxBPM;
	DWORD flags = (DWORD)jflags;

	float result_ = BASS_FX_BPM_DecodeGet(chan, startSec, endSec, minMaxBPM, flags, jproc == 0 ? NULL : BPMPROCESSPROC_BRIDGE, NULL);

	return (jfloat)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1CallbackSet(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jproc, jdouble jperiod, jint jminMaxBPM, jint jflags, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	double period = (double)jperiod;
	DWORD minMaxBPM = (DWORD)jminMaxBPM;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	BOOL result_ = BASS_FX_BPM_CallbackSet(handle, jproc == 0 ? NULL : BPMPROC_BRIDGE, period, minMaxBPM, flags, user);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1CallbackReset(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_FX_BPM_CallbackReset(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jfloat JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1Translate(JNIEnv *java_env, jclass jcls, jint jhandle, jfloat jval2tran, jint jtrans) {
	DWORD handle = (DWORD)jhandle;
	float val2tran = (float)jval2tran;
	DWORD trans = (DWORD)jtrans;

	float result_ = BASS_FX_BPM_Translate(handle, val2tran, trans);

	return (jfloat)result_;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1Free(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_FX_BPM_Free(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatCallbackSet(JNIEnv *java_env, jclass jcls, jint jhandle, jboolean jproc, jlong juser) {
	DWORD handle = (DWORD)jhandle;
	void *user = N2J_ADR2PTR(juser, void *);

	BOOL result_ = BASS_FX_BPM_BeatCallbackSet(handle, jproc == 0 ? NULL : BPMBEATPROC_BRIDGE, user);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatCallbackReset(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_FX_BPM_BeatCallbackReset(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatDecodeGet(JNIEnv *java_env, jclass jcls, jint jchan, jdouble jstartSec, jdouble jendSec, jint jflags, jboolean jproc, jlong juser) {
	DWORD chan = (DWORD)jchan;
	double startSec = (double)jstartSec;
	double endSec = (double)jendSec;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	BOOL result_ = BASS_FX_BPM_BeatDecodeGet(chan, startSec, endSec, flags, jproc == 0 ? NULL : BPMBEATPROC_BRIDGE, user);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatSetParameters(JNIEnv *java_env, jclass jcls, jint jhandle, jfloat jbandwidth, jfloat jcenterfreq, jfloat jbeat_rtime) {
	DWORD handle = (DWORD)jhandle;
	float bandwidth = (float)jbandwidth;
	float centerfreq = (float)jcenterfreq;
	float beat_rtime = (float)jbeat_rtime;

	BOOL result_ = BASS_FX_BPM_BeatSetParameters(handle, bandwidth, centerfreq, beat_rtime);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatGetParameters(JNIEnv *java_env, jclass jcls, jint jhandle, jobject jbandwidth, jlong jbandwidth_, jobject jcenterfreq, jlong jcenterfreq_, jobject jbeat_rtime, jlong jbeat_rtime_) {
	DWORD handle = (DWORD)jhandle;
	float *bandwidth = 0;
	if(jbandwidth) {
		bandwidth = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jbandwidth), char *)+jbandwidth_, float *);
	}
	float *centerfreq = 0;
	if(jcenterfreq) {
		centerfreq = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jcenterfreq), char *)+jcenterfreq_, float *);
	}
	float *beat_rtime = 0;
	if(jbeat_rtime) {
		beat_rtime = N2J_CAST(N2J_CAST(java_env->GetDirectBufferAddress(jbeat_rtime), char *)+jbeat_rtime_, float *);
	}

	BOOL result_ = BASS_FX_BPM_BeatGetParameters(handle, bandwidth, centerfreq, beat_rtime);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1FX_1BPM_1BeatFree(JNIEnv *java_env, jclass jcls, jint jhandle) {
	DWORD handle = (DWORD)jhandle;

	BOOL result_ = BASS_FX_BPM_BeatFree(handle);

	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MPC_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_MPC_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MPC_1StreamCreateURL(JNIEnv *java_env, jclass jcls, jbyteArray jurl, jint joffset, jint jflags, jboolean jproc, jlong juser) {
	const char *url = (const char *)getByteArrayElements(java_env, jurl);
	DWORD offset = (DWORD)joffset;
	DWORD flags = (DWORD)jflags;
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_MPC_StreamCreateURL(url, offset, flags, jproc == 0 ? NULL : DOWNLOADPROC_BRIDGE, user);

	releaseByteArrayElements(java_env, jurl, (const char *)url);
	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1MPC_1StreamCreateFileUser(JNIEnv *java_env, jclass jcls, jint jsystem, jint jflags, jlong jproc, jlong juser) {
	DWORD system = (DWORD)jsystem;
	DWORD flags = (DWORD)jflags;
	BASS_FILEPROCS *proc = 0;
	if(jproc) {
		proc = N2J_ADR2PTR(jproc, BASS_FILEPROCS *);
	}
	void *user = N2J_ADR2PTR(juser, void *);

	HSTREAM cresult = BASS_MPC_StreamCreateFileUser(system, flags, proc, user);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_BassJNI_Bass_1BASS_1SPX_1StreamCreateFile(JNIEnv *java_env, jclass jcls, jboolean jmem, jlong jfile, jlong joffset, jlong jlength, jint jflags) {
	bool mem = N2J_CAST(jmem != 0, bool);
	void *file = N2J_ADR2PTR(jfile, void *);
	QWORD offset = (QWORD)joffset;
	QWORD length = (QWORD)jlength;
	DWORD flags = (DWORD)jflags;

	HSTREAM cresult = BASS_SPX_StreamCreateFile(mem, file, offset, length, flags);

	jlong jresult = N2J_CAST(cresult, jlong);
	return jresult;
}


