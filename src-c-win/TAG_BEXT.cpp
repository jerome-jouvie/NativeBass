/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1new(JNIEnv *java_env, jclass jcls) {
	TAG_BEXT *result_ = new TAG_BEXT();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, TAG_BEXT *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	delete pointer;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1Description_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char result_ = pointer->Description[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1Description(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char *result_ = (char *)pointer->Description;
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1Description(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jDescription) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char Description = (char)jDescription;
	pointer->Description[elementIndex] = Description;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1Originator_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char result_ = pointer->Originator[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1Originator(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char *result_ = (char *)pointer->Originator;
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1Originator(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jOriginator) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char Originator = (char)jOriginator;
	pointer->Originator[elementIndex] = Originator;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginatorReference_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char result_ = pointer->OriginatorReference[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginatorReference(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char *result_ = (char *)pointer->OriginatorReference;
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1OriginatorReference(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jOriginatorReference) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char OriginatorReference = (char)jOriginatorReference;
	pointer->OriginatorReference[elementIndex] = OriginatorReference;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginationDate_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char result_ = pointer->OriginationDate[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginationDate(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char *result_ = (char *)pointer->OriginationDate;
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1OriginationDate(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jOriginationDate) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char OriginationDate = (char)jOriginationDate;
	pointer->OriginationDate[elementIndex] = OriginationDate;
}

JNIEXPORT jchar JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginationTime_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char result_ = pointer->OriginationTime[elementIndex];
	return (jchar)result_;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1OriginationTime(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char *result_ = (char *)pointer->OriginationTime;
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1OriginationTime(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jchar jOriginationTime) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	char OriginationTime = (char)jOriginationTime;
	pointer->OriginationTime[elementIndex] = OriginationTime;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1TimeReference(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	QWORD result_ = pointer->TimeReference;
	return (jlong)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1TimeReference(JNIEnv *java_env, jclass jcls, jlong jpointer, jlong jTimeReference) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	QWORD TimeReference = (QWORD)jTimeReference;
	pointer->TimeReference = TimeReference;
}

JNIEXPORT jshort JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1Version(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	WORD result_ = pointer->Version;
	return (jshort)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1Version(JNIEnv *java_env, jclass jcls, jlong jpointer, jshort jVersion) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	WORD Version = (WORD)jVersion;
	pointer->Version = Version;
}

JNIEXPORT jbyte JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1UMID_1element(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	BYTE result_ = pointer->UMID[elementIndex];
	return (jbyte)result_;
}

JNIEXPORT jobject JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1get_1UMID(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	BYTE *result_ = (BYTE *)pointer->UMID;
	jobject jresult = 0;
	if(result_) {
		jresult = java_env->NewDirectByteBuffer((BYTE *)result_, 64);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1BEXT_1set_1UMID(JNIEnv *java_env, jclass jcls, jlong jpointer, jint elementIndex, jbyte jUMID) {
	TAG_BEXT *pointer = N2J_CAST(jpointer, TAG_BEXT *);
	BYTE UMID = (BYTE)jUMID;
	pointer->UMID[elementIndex] = UMID;
}



