/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1new(JNIEnv *java_env, jclass jcls) {
	BASS_RECORDINFO *result_ = new BASS_RECORDINFO();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, BASS_RECORDINFO *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	delete pointer;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1get_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD result_ = pointer->flags;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1set_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jflags) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD flags = (DWORD)jflags;
	pointer->flags = flags;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1get_1formats(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD result_ = pointer->formats;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1set_1formats(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jformats) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD formats = (DWORD)jformats;
	pointer->formats = formats;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1get_1inputs(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD result_ = pointer->inputs;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1set_1inputs(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jinputs) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD inputs = (DWORD)jinputs;
	pointer->inputs = inputs;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1get_1singlein(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	BOOL result_ = pointer->singlein;
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1set_1singlein(JNIEnv *java_env, jclass jcls, jlong jpointer, jboolean jsinglein) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	BOOL singlein = N2J_CAST(jsinglein != 0, BOOL);
	pointer->singlein = singlein;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1get_1freq(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD result_ = pointer->freq;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1RECORDINFO_1set_1freq(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jfreq) {
	BASS_RECORDINFO *pointer = N2J_CAST(jpointer, BASS_RECORDINFO *);
	DWORD freq = (DWORD)jfreq;
	pointer->freq = freq;
}



