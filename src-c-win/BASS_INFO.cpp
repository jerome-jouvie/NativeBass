/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1new(JNIEnv *java_env, jclass jcls) {
	BASS_INFO *result_ = new BASS_INFO();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, BASS_INFO *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	delete pointer;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->flags;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jflags) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD flags = (DWORD)jflags;
	pointer->flags = flags;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1hwsize(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->hwsize;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1hwsize(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jhwsize) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD hwsize = (DWORD)jhwsize;
	pointer->hwsize = hwsize;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1hwfree(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->hwfree;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1hwfree(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jhwfree) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD hwfree = (DWORD)jhwfree;
	pointer->hwfree = hwfree;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1freesam(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->freesam;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1freesam(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jfreesam) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD freesam = (DWORD)jfreesam;
	pointer->freesam = freesam;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1free3d(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->free3d;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1free3d(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jfree3d) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD free3d = (DWORD)jfree3d;
	pointer->free3d = free3d;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1minrate(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->minrate;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1minrate(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jminrate) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD minrate = (DWORD)jminrate;
	pointer->minrate = minrate;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1maxrate(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->maxrate;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1maxrate(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jmaxrate) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD maxrate = (DWORD)jmaxrate;
	pointer->maxrate = maxrate;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1eax(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	BOOL result_ = pointer->eax;
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1eax(JNIEnv *java_env, jclass jcls, jlong jpointer, jboolean jeax) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	BOOL eax = N2J_CAST(jeax != 0, BOOL);
	pointer->eax = eax;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1minbuf(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->minbuf;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1minbuf(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jminbuf) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD minbuf = (DWORD)jminbuf;
	pointer->minbuf = minbuf;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1dsver(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->dsver;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1dsver(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jdsver) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD dsver = (DWORD)jdsver;
	pointer->dsver = dsver;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1latency(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->latency;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1latency(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jlatency) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD latency = (DWORD)jlatency;
	pointer->latency = latency;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1initflags(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->initflags;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1initflags(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jinitflags) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD initflags = (DWORD)jinitflags;
	pointer->initflags = initflags;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1speakers(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->speakers;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1speakers(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jspeakers) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD speakers = (DWORD)jspeakers;
	pointer->speakers = speakers;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1get_1freq(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD result_ = pointer->freq;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_BASS_1INFO_1set_1freq(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jfreq) {
	BASS_INFO *pointer = N2J_CAST(jpointer, BASS_INFO *);
	DWORD freq = (DWORD)jfreq;
	pointer->freq = freq;
}



