/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1new(JNIEnv *java_env, jclass jcls) {
	TAG_FLAC_CUE *result_ = new TAG_FLAC_CUE();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, TAG_FLAC_CUE *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	delete pointer;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1get_1catalog(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	const char *result_ = N2J_CAST(pointer->catalog, const char *);
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1set_1catalog(JNIEnv *java_env, jclass jcls, jlong jpointer, jbyteArray jcatalog) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	const char *catalog = 0;
	if(jcatalog) {
		catalog = (const char *)getByteArrayElements(java_env, jcatalog);
		pointer->catalog = catalog;
	}
	else {
		pointer->catalog = (const char *)0;
	}
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1get_1leadin(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	DWORD result_ = pointer->leadin;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1set_1leadin(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jleadin) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	DWORD leadin = (DWORD)jleadin;
	pointer->leadin = leadin;
}

JNIEXPORT jboolean JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1get_1iscd(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	BOOL result_ = pointer->iscd;
	return N2J_CAST(result_ != 0, jboolean);
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1set_1iscd(JNIEnv *java_env, jclass jcls, jlong jpointer, jboolean jiscd) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	BOOL iscd = N2J_CAST(jiscd != 0, BOOL);
	pointer->iscd = iscd;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1get_1ntracks(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	DWORD result_ = pointer->ntracks;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1set_1ntracks(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jntracks) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	DWORD ntracks = (DWORD)jntracks;
	pointer->ntracks = ntracks;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1get_1tracks(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	N2J_PTR2ADR(jresult, pointer->tracks, const TAG_FLAC_CUE_TRACK *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1set_1tracks(JNIEnv *java_env, jclass jcls, jlong jpointer, jlong jtracks) {
	TAG_FLAC_CUE *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE *);
	pointer->tracks = N2J_ADR2PTR(jtracks, TAG_FLAC_CUE_TRACK *);
}



