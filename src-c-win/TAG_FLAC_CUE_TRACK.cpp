/* DO NOT EDIT - AUTOGENERATED */
/**
 * 				NativeBass Project
 *
 * Want to use BASS (www.un4seen.com) in the Java language ? NativeBass is made for you.
 * Copyright © 2007-2011 Jérôme JOUVIE
 *
 * Created on 02 jul. 2007
 * @version file v1.1.1
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * 
 * INTRODUCTION
 * BASS is an audio library for use in Windows and Mac OSX software.
 * Its purpose is to provide developers with the most powerful and
 * efficient (yet easy to use), sample, stream (MP3, MP2, MP1, OGG, WAV, AIFF,
 * custom generated, and more via add-ons), MOD music (XM, IT, S3M, MOD, MTM, UMX),
 * MO3 music (MP3/OGG compressed MODs),
 * and recording functions. All in a tiny DLL, under 100KB* in size.
 * 
 * BASS official web site :
 * 		http://www.un4seen.com/
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

#include "NativeBass.h"
#include "bass.h"
#include "bassenc.h"
#include "bassflac.h"
#include "bassmidi.h"
#include "bassmix.h"
#include "basswv.h"
#include "bass_aac.h"
#include "bass_ac3.h"
#include "bassalac.h"
#include "bass_fx.h"
#include "bass_mpc.h"
#include "bass_spx.h"
#include "Utils.h"
#include "Pointer.h"
#include "JavaObject.h"
#include "jouvieje_bass_structures_StructureJNI.h"
#include "CallbackManager.h"

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1new(JNIEnv *java_env, jclass jcls) {
	TAG_FLAC_CUE_TRACK *result_ = new TAG_FLAC_CUE_TRACK();
	CheckAllocation(java_env, result_);
	N2J_PTR2ADR(jresult, result_, TAG_FLAC_CUE_TRACK *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1delete(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	delete pointer;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1offset(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	QWORD result_ = pointer->offset;
	return (jlong)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1offset(JNIEnv *java_env, jclass jcls, jlong jpointer, jlong joffset) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	QWORD offset = (QWORD)joffset;
	pointer->offset = offset;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1number(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD result_ = pointer->number;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1number(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jnumber) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD number = (DWORD)jnumber;
	pointer->number = number;
}

JNIEXPORT jstring JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1isrc(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	const char *result_ = N2J_CAST(pointer->isrc, const char *);
	jstring jresult = 0;
	if(result_) {
		jresult = java_env->NewStringUTF((const char *)result_);
	}
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1isrc(JNIEnv *java_env, jclass jcls, jlong jpointer, jbyteArray jisrc) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	const char *isrc = 0;
	if(jisrc) {
		isrc = (const char *)getByteArrayElements(java_env, jisrc);
		pointer->isrc = isrc;
	}
	else {
		pointer->isrc = (const char *)0;
	}
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD result_ = pointer->flags;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1flags(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jflags) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD flags = (DWORD)jflags;
	pointer->flags = flags;
}

JNIEXPORT jint JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1nindexes(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD result_ = pointer->nindexes;
	return (jint)result_;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1nindexes(JNIEnv *java_env, jclass jcls, jlong jpointer, jint jnindexes) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	DWORD nindexes = (DWORD)jnindexes;
	pointer->nindexes = nindexes;
}

JNIEXPORT jlong JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1get_1indexes(JNIEnv *java_env, jclass jcls, jlong jpointer) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	N2J_PTR2ADR(jresult, pointer->indexes, const TAG_FLAC_CUE_TRACK_INDEX *);
	return jresult;
}

JNIEXPORT void JNICALL Java_jouvieje_bass_structures_StructureJNI_TAG_1FLAC_1CUE_1TRACK_1set_1indexes(JNIEnv *java_env, jclass jcls, jlong jpointer, jlong jindexes) {
	TAG_FLAC_CUE_TRACK *pointer = N2J_CAST(jpointer, TAG_FLAC_CUE_TRACK *);
	pointer->indexes = N2J_ADR2PTR(jindexes, TAG_FLAC_CUE_TRACK_INDEX *);
}



